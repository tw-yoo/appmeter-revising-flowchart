flowchart TB
    Input[/req: movementIdOrdMapping/]

    subgraph CreateGraph
            direction TB
            GraphInput[/"
                (input) 
                movement: Movement
            "/]
            Graph[/"graph = Graph()"/]
            AddNodeAndLink["graph.addAllNodes(movement.roadNode)"]
            GraphOutput[/"
                (output)
                graph
            "/]

            subgraph movement.roadLink.forEach
                direction TB

                itRoadLink[/"link ->"/]
                IfLinkDirectWay{"link goes direct?"}
                IfLinkReverseWay{"link goes reverse?"}

                AddDirectLink["graph.addLink(
                    source: link.source, 
                    target: link.target,
                    weight: link.length)
                "]
                AddReverseLink["graph.addLink(
                    source: link.target, 
                    target: link.source,
                    weight: link.length)
                "]

                Continue("continue@forEach")

                itRoadLink --> IfLinkDirectWay
                itRoadLink --> IfLinkReverseWay

                IfLinkDirectWay --yes--> AddDirectLink
                IfLinkDirectWay --no--> Continue
                IfLinkReverseWay --no--> Continue
                IfLinkReverseWay --yes--> AddReverseLink

            end

            GraphInput --> Graph --> AddNodeAndLink --> movement.roadLink.forEach --> GraphOutput

        end

    subgraph UpdateTransition
        direction TB

        subgraph req.forEach
            direction TB

            itReq[/"(movement, ordList) ->"/]

            subgraph ordList.forLoop
                direction TB
                forCondition["for (i=0 until ordList.lastIndex):"]
                startEnd[/"
                    start = movement.gpsRecordList[i]
                    end = movement.gpsRecordList[i+1]
                "/]

                dijkstraPath["
                    1. get dijkstra path from start to end
                    2. get transition prob (direct distance, dijkstra path distance)
                    3. create Transition object
                "]

                addTransition["
                    movement.transitionList.add(Transition)
                "]

                forCondition --> startEnd --> dijkstraPath --> addTransition
            end

            itReq --> ordList.forLoop

        end

    end

    Termination("Termination UpdateTransition")
Input --> UpdateTransition --> Termination